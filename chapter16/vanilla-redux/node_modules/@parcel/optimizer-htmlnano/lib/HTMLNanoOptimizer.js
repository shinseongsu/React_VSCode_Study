"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _htmlnano = _interopRequireDefault(require("htmlnano"));

var _utils = require("@parcel/utils");

var _plugin = require("@parcel/plugin");

var _posthtml = _interopRequireDefault(require("posthtml"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _default = new _plugin.Optimizer({
  async optimize({
    contents,
    map,
    options
  }) {
    if (!options.minify) {
      return {
        contents,
        map
      };
    }

    if (typeof contents !== 'string') {
      throw new Error('HTMLNanoOptimizer: Only string contents are currently supported');
    }

    let userConfig = await (0, _utils.loadConfig)(options.inputFS, _path.default.join(options.rootDir, 'index.html'), ['.htmlnanorc', '.htmlnanorc.js']);

    const htmlNanoConfig = _objectSpread({
      minifyJs: false
    }, userConfig === null || userConfig === void 0 ? void 0 : userConfig.config);

    return {
      contents: (await (0, _posthtml.default)([(0, _htmlnano.default)(htmlNanoConfig)]).process(contents)).html
    };
  }

});

exports.default = _default;