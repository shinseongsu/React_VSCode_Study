"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = UI;

var _ink = require("ink");

var _react = _interopRequireWildcard(require("react"));

var _Log = require("./Log");

var _BundleReport = _interopRequireDefault(require("./BundleReport"));

var _utils = require("./utils");

var _logLevels = _interopRequireDefault(require("./logLevels"));

var _utils2 = require("@parcel/utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const defaultState = {
  progress: null,
  logs: [],
  bundleGraph: null
};

function UI({
  events,
  options
}) {
  let [state, dispatch] = (0, _react.useReducer)((state, event) => reducer(state, event, options), defaultState);
  (0, _react.useLayoutEffect)(() => events.addListener(dispatch).dispose, [events]);
  let {
    logs,
    progress,
    bundleGraph
  } = state;
  return _react.default.createElement(_ink.Color, {
    reset: true
  }, _react.default.createElement("div", null, options.serve && _react.default.createElement(_Log.ServerInfo, {
    options: options.serve
  }), logs.map((log, i) => _react.default.createElement(_Log.Log, {
    key: i,
    event: log
  })), progress ? _react.default.createElement(_Log.Progress, {
    event: progress
  }) : null, options.mode === 'production' && bundleGraph ? _react.default.createElement(_BundleReport.default, {
    bundleGraph: bundleGraph
  }) : null));
}

function reducer(state, event, options) {
  let logLevel = _logLevels.default[options.logLevel];

  switch (event.type) {
    case 'buildStart':
      if (logLevel < _logLevels.default.info) {
        break;
      }

      return _objectSpread({}, state, {
        logs: [],
        bundleGraph: null
      });

    case 'buildProgress':
      {
        if (logLevel < _logLevels.default.progress) {
          break;
        }

        let message = (0, _utils.getProgressMessage)(event);
        let progress = state.progress;

        if (message != null) {
          progress = {
            type: 'log',
            level: 'progress',
            message
          };
        }

        return _objectSpread({}, state, {
          progress
        });
      }

    case 'buildSuccess':
      if (logLevel < _logLevels.default.info) {
        break;
      }

      return _objectSpread({}, state, {
        progress: null,
        bundleGraph: event.bundleGraph,
        logs: [...state.logs, {
          type: 'log',
          level: 'success',
          message: `Built in ${(0, _utils2.prettifyTime)(event.buildTime)}.`
        }]
      });

    case 'buildFailure':
      if (logLevel < _logLevels.default.error) {
        break;
      }

      return _objectSpread({}, state, {
        progress: null,
        logs: [...state.logs, {
          type: 'log',
          level: 'error',
          diagnostics: event.diagnostics
        }]
      });

    case 'log':
      {
        if (logLevel < _logLevels.default[event.level]) {
          break;
        }

        if (event.level === 'progress') {
          return _objectSpread({}, state, {
            progress: event
          });
        } // Skip duplicate logs

        /*let messages = new Set(state.logs.map(l => l.message));
        if (messages.has(event.message)) {
          break;
        }*/


        return _objectSpread({}, state, {
          logs: [...state.logs, event]
        });
      }
  }

  return state;
}