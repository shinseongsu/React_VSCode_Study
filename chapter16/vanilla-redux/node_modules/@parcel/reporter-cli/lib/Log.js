"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Log = Log;
exports.Progress = Progress;
exports.ServerInfo = ServerInfo;

var _utils = require("@parcel/utils");

var _ink = require("ink");

var _Spinner = _interopRequireDefault(require("./Spinner"));

var _react = _interopRequireDefault(require("react"));

var Emoji = _interopRequireWildcard(require("./emoji"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Log({
  event
}) {
  switch (event.level) {
    case 'verbose':
    case 'info':
      return _react.default.createElement(InfoLog, {
        event: event
      });

    case 'progress':
      return _react.default.createElement(Progress, {
        event: event
      });

    case 'success':
      return _react.default.createElement(SuccessLog, {
        event: event
      });

    case 'error':
      return _react.default.createElement(ErrorLog, {
        event: event
      });

    case 'warn':
      return _react.default.createElement(WarnLog, {
        event: event
      });
  }

  throw new Error('Unknown log event type');
}

function Hints({
  hints
}) {
  return _react.default.createElement("div", null, hints.map((hint, i) => {
    return _react.default.createElement("div", {
      key: i
    }, `- ${hint}`);
  }));
}

function DiagnosticContainer({
  diagnostics,
  color,
  emoji
}) {
  return _react.default.createElement(_react.default.Fragment, null, diagnostics.map((d, i) => {
    let {
      message,
      stack,
      hints,
      codeframe
    } = (0, _utils.prettyDiagnostic)(d);
    return _react.default.createElement("div", {
      key: i
    }, _react.default.createElement(_ink.Color, {
      keyword: color
    }, _react.default.createElement(_ink.Color, {
      bold: true
    }, `${emoji}`), " ", message), !codeframe && stack && _react.default.createElement("div", null, _react.default.createElement(_ink.Color, {
      gray: true
    }, stack)), codeframe && _react.default.createElement("div", null, codeframe), hints.length > 0 && _react.default.createElement(Hints, {
      hints: hints
    }));
  }));
}

function InfoLog({
  event
}) {
  return _react.default.createElement(DiagnosticContainer, {
    diagnostics: event.diagnostics,
    emoji: Emoji.info,
    color: "blue"
  });
}

function WarnLog({
  event
}) {
  return _react.default.createElement(DiagnosticContainer, {
    diagnostics: event.diagnostics,
    emoji: Emoji.warning,
    color: "yellow"
  });
}

function ErrorLog({
  event
}) {
  return _react.default.createElement(DiagnosticContainer, {
    diagnostics: event.diagnostics,
    emoji: Emoji.error,
    color: "red",
    bold: true
  });
}

function SuccessLog({
  event
}) {
  return _react.default.createElement(_ink.Color, {
    green: true,
    bold: true
  }, Emoji.success, " ", event.message);
}

function Progress({
  event
}) {
  return _react.default.createElement(_ink.Box, null, _react.default.createElement(_ink.Color, {
    gray: true,
    bold: true
  }, _react.default.createElement(_Spinner.default, null), " ", event.message));
}

function ServerInfo({
  options
}) {
  var _options$host;

  let url = `${options.https ? 'https' : 'http'}://${(_options$host = options.host) !== null && _options$host !== void 0 ? _options$host : 'localhost'}:${options.port}`;
  return _react.default.createElement(_ink.Color, {
    bold: true
  }, "Server running at ", _react.default.createElement(_ink.Color, {
    cyan: true
  }, url));
}