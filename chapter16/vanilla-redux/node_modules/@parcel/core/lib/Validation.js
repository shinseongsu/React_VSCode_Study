"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _nullthrows = _interopRequireDefault(require("nullthrows"));

var _utils = require("@parcel/utils");

var _logger = _interopRequireWildcard(require("@parcel/logger"));

var _diagnostic = _interopRequireWildcard(require("@parcel/diagnostic"));

var _ParcelConfig = _interopRequireDefault(require("./ParcelConfig"));

var _ConfigLoader = _interopRequireDefault(require("./ConfigLoader"));

var _ReporterRunner = require("./ReporterRunner");

var _InternalAsset = _interopRequireWildcard(require("./InternalAsset"));

var _Asset = require("./public/Asset");

var _PluginOptions = _interopRequireDefault(require("./public/PluginOptions"));

var _summarizeRequest = _interopRequireDefault(require("./summarizeRequest"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Validation {
  constructor({
    request,
    options,
    workerApi
  }) {
    _defineProperty(this, "request", void 0);

    _defineProperty(this, "configRequests", void 0);

    _defineProperty(this, "configLoader", void 0);

    _defineProperty(this, "options", void 0);

    _defineProperty(this, "impactfulOptions", void 0);

    _defineProperty(this, "workerApi", void 0);

    this.request = request;
    this.options = options;
    this.workerApi = workerApi;
    this.configLoader = new _ConfigLoader.default(options);
  }

  async run() {
    (0, _ReporterRunner.report)({
      type: 'validation',
      filePath: this.request.filePath
    });
    let asset = await this.loadAsset();
    let configRequest = {
      filePath: this.request.filePath,
      isSource: asset.value.isSource,
      meta: {
        actionType: 'validation'
      },
      env: this.request.env
    };
    let config = await this.configLoader.load(configRequest);
    (0, _nullthrows.default)(config.result);
    let parcelConfig = new _ParcelConfig.default(config.result, this.options.packageManager);
    let validators = await parcelConfig.getValidators(this.request.filePath);
    let pluginOptions = new _PluginOptions.default(this.options);

    for (let validator of validators) {
      let validatorLogger = new _logger.PluginLogger({
        origin: validator.name
      });

      try {
        let config = null;

        if (validator.plugin.getConfig) {
          config = await validator.plugin.getConfig({
            asset: new _Asset.Asset(asset),
            options: pluginOptions,
            logger: validatorLogger,
            resolveConfig: configNames => (0, _utils.resolveConfig)(this.options.inputFS, asset.value.filePath, configNames)
          });
        }

        let validatorResult = await validator.plugin.validate({
          asset: new _Asset.Asset(asset),
          options: pluginOptions,
          config,
          logger: validatorLogger
        });

        if (validatorResult) {
          let {
            warnings,
            errors
          } = validatorResult;

          if (errors.length > 0) {
            throw new _diagnostic.default({
              diagnostic: errors
            });
          }

          if (warnings.length > 0) {
            _logger.default.warn(warnings);
          }
        }
      } catch (e) {
        throw new _diagnostic.default({
          diagnostic: (0, _diagnostic.errorToDiagnostic)(e, validator.name)
        });
      }
    }
  }

  async loadAsset() {
    let {
      filePath,
      env,
      code,
      sideEffects
    } = this.request;
    let {
      content,
      size,
      hash,
      isSource
    } = await (0, _summarizeRequest.default)(this.options.inputFS, this.request); // If the transformer request passed code rather than a filename,
    // use a hash as the base for the id to ensure it is unique.

    let idBase = code != null ? hash : filePath;
    return new _InternalAsset.default({
      idBase,
      value: (0, _InternalAsset.createAsset)({
        idBase,
        filePath: filePath,
        isSource,
        type: _path.default.extname(filePath).slice(1),
        hash,
        env: env,
        stats: {
          time: 0,
          size
        },
        sideEffects: sideEffects
      }),
      options: this.options,
      content
    });
  }

}

exports.default = Validation;